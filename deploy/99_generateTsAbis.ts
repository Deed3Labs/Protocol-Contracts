import * as fs from "fs";
import * as path from "path";
import * as prettier from "prettier";

const DEPLOYMENTS_DIR = "./deployments";
const ARTIFACTS_DIR = "./artifacts";
const TARGET_DIR = "../nextjs/contracts/";

const generatedContractComment = `
/**
 * This file is autogenerated by the deployment scripts.
 * You should not edit it manually or your changes might be overwritten.
 */
`;

function getDirectories(path: string) {
  return fs
    .readdirSync(path, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);
}

function getContractNames(path: string) {
  return fs
    .readdirSync(path, { withFileTypes: true })
    .filter(dirent => dirent.isFile() && dirent.name.endsWith(".json"))
    .map(dirent => dirent.name.split(".")[0]);
}

function getContractDataFromDeployments() {
  if (!fs.existsSync(DEPLOYMENTS_DIR)) {
    throw Error("At least one other deployment script should exist to generate an actual contract.");
  }
  const output = {} as Record<string, any>;
  for (const chainName of getDirectories(DEPLOYMENTS_DIR)) {
    const contracts = {} as Record<string, any>;
    for (const contractName of getContractNames(`${DEPLOYMENTS_DIR}/${chainName}`)) {
      const json = fs.readFileSync(`${DEPLOYMENTS_DIR}/${chainName}/${contractName}.json`).toString();
      const { abi, address } = JSON.parse(json);
      contracts[contractName] = { address, abi };
    }
    output[chainName] = contracts;
  }
  return output;
}

async function main() {
  const allContractsData = getContractDataFromDeployments();

  const fileContent = Object.entries(allContractsData).reduce((content, [chainName, chainConfig]) => {
    return `${content}"${chainName}":${JSON.stringify(chainConfig, null, 2)},`;
  }, "");

  if (!fs.existsSync(TARGET_DIR)) {
    fs.mkdirSync(TARGET_DIR, { recursive: true });
  }

  const formattedContent = await prettier.format(
    `${generatedContractComment}
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {${fileContent}} as const;

export default deployedContracts satisfies GenericContractsDeclaration`,
    {
      parser: "typescript",
    },
  );

  fs.writeFileSync(`${TARGET_DIR}deployedContracts.ts`, formattedContent);

  console.log(`📝 Updated TypeScript contract definition file on ${TARGET_DIR}deployedContracts.ts`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 