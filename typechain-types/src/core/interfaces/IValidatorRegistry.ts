/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IValidatorRegistry {
  export type ValidatorInfoStruct = {
    isActive: boolean;
    supportedAssetTypes: BigNumberish[];
    name: string;
    description: string;
  };

  export type ValidatorInfoStructOutput = [
    isActive: boolean,
    supportedAssetTypes: bigint[],
    name: string,
    description: string
  ] & {
    isActive: boolean;
    supportedAssetTypes: bigint[];
    name: string;
    description: string;
  };
}

export interface IValidatorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getValidatorInfo"
      | "getValidatorName"
      | "getValidatorOwner"
      | "getValidatorsForAssetType"
      | "isValidatorActive"
      | "isValidatorRegistered"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getValidatorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsForAssetType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorRegistered",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getValidatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsForAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorRegistered",
    data: BytesLike
  ): Result;
}

export interface IValidatorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IValidatorRegistry;
  waitForDeployment(): Promise<this>;

  interface: IValidatorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getValidatorInfo: TypedContractMethod<
    [validator: AddressLike],
    [IValidatorRegistry.ValidatorInfoStructOutput],
    "view"
  >;

  getValidatorName: TypedContractMethod<
    [validator: AddressLike],
    [string],
    "view"
  >;

  getValidatorOwner: TypedContractMethod<
    [validatorContract: AddressLike],
    [string],
    "view"
  >;

  getValidatorsForAssetType: TypedContractMethod<
    [assetTypeId: BigNumberish],
    [string[]],
    "view"
  >;

  isValidatorActive: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  isValidatorRegistered: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getValidatorInfo"
  ): TypedContractMethod<
    [validator: AddressLike],
    [IValidatorRegistry.ValidatorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorName"
  ): TypedContractMethod<[validator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValidatorOwner"
  ): TypedContractMethod<[validatorContract: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValidatorsForAssetType"
  ): TypedContractMethod<[assetTypeId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isValidatorActive"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidatorRegistered"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;

  filters: {};
}
