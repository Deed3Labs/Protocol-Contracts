/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IMetadataRendererInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTokenDocument"
      | "getTokenDocumentTypes"
      | "getTokenFeatures"
      | "getTokenGallery"
      | "removeTokenDocument"
      | "setDeedNFT"
      | "setTokenDocument"
      | "setTokenDocuments"
      | "setTokenFeatures"
      | "setTokenGallery"
      | "tokenURI"
      | "updateAssetDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTokenDocument",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDocumentTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFeatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenGallery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenDocument",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDocument",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDocuments",
    values: [BigNumberish, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFeatures",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenGallery",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAssetDetails",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTokenDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDocumentTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenGallery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDeedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenGallery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetDetails",
    data: BytesLike
  ): Result;
}

export interface IMetadataRenderer extends BaseContract {
  connect(runner?: ContractRunner | null): IMetadataRenderer;
  waitForDeployment(): Promise<this>;

  interface: IMetadataRendererInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTokenDocument: TypedContractMethod<
    [tokenId: BigNumberish, docType: string],
    [string],
    "view"
  >;

  getTokenDocumentTypes: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenFeatures: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenGallery: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  removeTokenDocument: TypedContractMethod<
    [tokenId: BigNumberish, docType: string],
    [void],
    "nonpayable"
  >;

  setDeedNFT: TypedContractMethod<[deedNFT: AddressLike], [void], "nonpayable">;

  setTokenDocument: TypedContractMethod<
    [tokenId: BigNumberish, docType: string, documentURI: string],
    [void],
    "nonpayable"
  >;

  setTokenDocuments: TypedContractMethod<
    [tokenId: BigNumberish, docTypes: string[], documentURIs: string[]],
    [void],
    "nonpayable"
  >;

  setTokenFeatures: TypedContractMethod<
    [tokenId: BigNumberish, features: string[]],
    [void],
    "nonpayable"
  >;

  setTokenGallery: TypedContractMethod<
    [tokenId: BigNumberish, imageUrls: string[]],
    [void],
    "nonpayable"
  >;

  tokenURI: TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  updateAssetDetails: TypedContractMethod<
    [tokenId: BigNumberish, assetType: BigNumberish, details: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTokenDocument"
  ): TypedContractMethod<
    [tokenId: BigNumberish, docType: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenDocumentTypes"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenFeatures"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenGallery"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "removeTokenDocument"
  ): TypedContractMethod<
    [tokenId: BigNumberish, docType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeedNFT"
  ): TypedContractMethod<[deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenDocument"
  ): TypedContractMethod<
    [tokenId: BigNumberish, docType: string, documentURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenDocuments"
  ): TypedContractMethod<
    [tokenId: BigNumberish, docTypes: string[], documentURIs: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenFeatures"
  ): TypedContractMethod<
    [tokenId: BigNumberish, features: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenGallery"
  ): TypedContractMethod<
    [tokenId: BigNumberish, imageUrls: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateAssetDetails"
  ): TypedContractMethod<
    [tokenId: BigNumberish, assetType: BigNumberish, details: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
