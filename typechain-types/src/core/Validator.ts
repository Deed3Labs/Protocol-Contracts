/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ValidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CRITERIA_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_MANAGER_ROLE"
      | "METADATA_ROLE"
      | "VALIDATOR_ROLE"
      | "addCompatibleDeedNFT"
      | "addFieldRequirementsBatch"
      | "addWhitelistedToken"
      | "baseUri"
      | "clearFieldRequirements"
      | "compatibleDeedNFTs"
      | "deedMetadata"
      | "deedNFT"
      | "defaultOperatingAgreement"
      | "defaultOperatingAgreementUri"
      | "fundManager"
      | "getBaseUri"
      | "getRoleAdmin"
      | "getRoyaltyFeePercentage"
      | "getRoyaltyReceiver"
      | "getServiceFee"
      | "getValidationCriteria"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCompatibleDeedNFT"
      | "isTokenWhitelisted"
      | "isWhitelisted"
      | "operatingAgreementName"
      | "operatingAgreements"
      | "owner"
      | "primaryDeedNFT"
      | "proxiableUUID"
      | "registerOperatingAgreement"
      | "removeCompatibleDeedNFT"
      | "removeOperatingAgreementName"
      | "removeWhitelistedToken"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "royaltyFeePercentage"
      | "royaltyReceiver"
      | "serviceFee"
      | "serviceFeesBalance"
      | "setAssetTypeSupport"
      | "setBaseUri"
      | "setDeedMetadata"
      | "setDeedNFT"
      | "setDefaultOperatingAgreement"
      | "setFundManager"
      | "setOperatingAgreementName"
      | "setPrimaryDeedNFT"
      | "setRoyaltyFeePercentage"
      | "setRoyaltyReceiver"
      | "setServiceFee"
      | "setValidationCriteria"
      | "setupAllFieldRequirements"
      | "setupFieldRequirements"
      | "supportedAssetTypes"
      | "supportsAssetType"
      | "supportsInterface"
      | "tokenURI"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validateDeed"
      | "validateOperatingAgreement"
      | "validationCriteria"
      | "withdrawServiceFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "CompatibleDeedNFTUpdated"
      | "DeedNFTUpdated"
      | "DeedValidated"
      | "DefaultOperatingAgreementUpdated"
      | "FieldRequirementAdded"
      | "FieldRequirementsCleared"
      | "Initialized"
      | "OperatingAgreementRegistered"
      | "OwnershipTransferred"
      | "PrimaryDeedNFTUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ServiceFeeUpdated"
      | "TokenWhitelistStatusUpdated"
      | "Upgraded"
      | "ValidationCriteriaUpdated"
      | "ValidationError"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CRITERIA_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METADATA_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCompatibleDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addFieldRequirementsBatch",
    values: [BigNumberish, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseUri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clearFieldRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compatibleDeedNFTs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deedMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deedNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultOperatingAgreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOperatingAgreementUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidationCriteria",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompatibleDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatingAgreementName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatingAgreements",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "primaryDeedNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperatingAgreement",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCompatibleDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatingAgreementName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeesBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetTypeSupport",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseUri", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDeedMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOperatingAgreement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatingAgreementName",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidationCriteria",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAllFieldRequirements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setupFieldRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAssetTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsAssetType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOperatingAgreement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validationCriteria",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawServiceFees",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CRITERIA_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METADATA_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCompatibleDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFieldRequirementsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearFieldRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compatibleDeedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperatingAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperatingAgreementUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCompatibleDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatingAgreementName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatingAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primaryDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperatingAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCompatibleDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatingAgreementName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "serviceFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetTypeSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDeedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDeedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOperatingAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatingAgreementName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupAllFieldRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupFieldRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAssetTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOperatingAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawServiceFees",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompatibleDeedNFTUpdatedEvent {
  export type InputTuple = [deedNFTAddress: AddressLike, isCompatible: boolean];
  export type OutputTuple = [deedNFTAddress: string, isCompatible: boolean];
  export interface OutputObject {
    deedNFTAddress: string;
    isCompatible: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedNFTUpdatedEvent {
  export type InputTuple = [newDeedNFT: AddressLike];
  export type OutputTuple = [newDeedNFT: string];
  export interface OutputObject {
    newDeedNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedValidatedEvent {
  export type InputTuple = [tokenId: BigNumberish, isValid: boolean];
  export type OutputTuple = [tokenId: bigint, isValid: boolean];
  export interface OutputObject {
    tokenId: bigint;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultOperatingAgreementUpdatedEvent {
  export type InputTuple = [uri: string];
  export type OutputTuple = [uri: string];
  export interface OutputObject {
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FieldRequirementAddedEvent {
  export type InputTuple = [
    assetTypeId: BigNumberish,
    criteriaField: string,
    definitionField: string
  ];
  export type OutputTuple = [
    assetTypeId: bigint,
    criteriaField: string,
    definitionField: string
  ];
  export interface OutputObject {
    assetTypeId: bigint;
    criteriaField: string;
    definitionField: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FieldRequirementsClearedEvent {
  export type InputTuple = [assetTypeId: BigNumberish];
  export type OutputTuple = [assetTypeId: bigint];
  export interface OutputObject {
    assetTypeId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatingAgreementRegisteredEvent {
  export type InputTuple = [uri: string, name: string];
  export type OutputTuple = [uri: string, name: string];
  export interface OutputObject {
    uri: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryDeedNFTUpdatedEvent {
  export type InputTuple = [deedNFTAddress: AddressLike];
  export type OutputTuple = [deedNFTAddress: string];
  export interface OutputObject {
    deedNFTAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceFeeUpdatedEvent {
  export type InputTuple = [token: AddressLike, fee: BigNumberish];
  export type OutputTuple = [token: string, fee: bigint];
  export interface OutputObject {
    token: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWhitelistStatusUpdatedEvent {
  export type InputTuple = [token: AddressLike, status: boolean];
  export type OutputTuple = [token: string, status: boolean];
  export interface OutputObject {
    token: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationCriteriaUpdatedEvent {
  export type InputTuple = [assetTypeId: BigNumberish, criteria: string];
  export type OutputTuple = [assetTypeId: bigint, criteria: string];
  export interface OutputObject {
    assetTypeId: bigint;
    criteria: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidationErrorEvent {
  export type InputTuple = [tokenId: BigNumberish, errorMessage: string];
  export type OutputTuple = [tokenId: bigint, errorMessage: string];
  export interface OutputObject {
    tokenId: bigint;
    errorMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Validator extends BaseContract {
  connect(runner?: ContractRunner | null): Validator;
  waitForDeployment(): Promise<this>;

  interface: ValidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CRITERIA_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  METADATA_ROLE: TypedContractMethod<[], [string], "view">;

  VALIDATOR_ROLE: TypedContractMethod<[], [string], "view">;

  addCompatibleDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  addFieldRequirementsBatch: TypedContractMethod<
    [
      assetTypeId: BigNumberish,
      criteriaFields: string[],
      definitionFields: string[]
    ],
    [void],
    "nonpayable"
  >;

  addWhitelistedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  baseUri: TypedContractMethod<[], [string], "view">;

  clearFieldRequirements: TypedContractMethod<
    [assetTypeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  compatibleDeedNFTs: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  deedMetadata: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deedNFT: TypedContractMethod<[], [string], "view">;

  defaultOperatingAgreement: TypedContractMethod<[], [string], "view">;

  defaultOperatingAgreementUri: TypedContractMethod<[], [string], "view">;

  fundManager: TypedContractMethod<[], [string], "view">;

  getBaseUri: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoyaltyFeePercentage: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getRoyaltyReceiver: TypedContractMethod<[], [string], "view">;

  getServiceFee: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getValidationCriteria: TypedContractMethod<
    [assetTypeId: BigNumberish],
    [string],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_baseUri: string, _defaultOperatingAgreementUri: string],
    [void],
    "nonpayable"
  >;

  isCompatibleDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [boolean],
    "view"
  >;

  isTokenWhitelisted: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  operatingAgreementName: TypedContractMethod<[uri_: string], [string], "view">;

  operatingAgreements: TypedContractMethod<[arg0: string], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  primaryDeedNFT: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerOperatingAgreement: TypedContractMethod<
    [uri: string, name: string],
    [void],
    "nonpayable"
  >;

  removeCompatibleDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  removeOperatingAgreementName: TypedContractMethod<
    [_uri: string],
    [void],
    "nonpayable"
  >;

  removeWhitelistedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyFeePercentage: TypedContractMethod<[], [bigint], "view">;

  royaltyReceiver: TypedContractMethod<[], [string], "view">;

  serviceFee: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  serviceFeesBalance: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  setAssetTypeSupport: TypedContractMethod<
    [_assetTypeId: BigNumberish, _isSupported: boolean],
    [void],
    "nonpayable"
  >;

  setBaseUri: TypedContractMethod<[_newBaseUri: string], [void], "nonpayable">;

  setDeedMetadata: TypedContractMethod<
    [_tokenId: BigNumberish, _metadataUri: string],
    [void],
    "nonpayable"
  >;

  setDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultOperatingAgreement: TypedContractMethod<
    [_uri: string],
    [void],
    "nonpayable"
  >;

  setFundManager: TypedContractMethod<
    [_fundManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperatingAgreementName: TypedContractMethod<
    [_uri: string, _name: string],
    [void],
    "nonpayable"
  >;

  setPrimaryDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyaltyFeePercentage: TypedContractMethod<
    [percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoyaltyReceiver: TypedContractMethod<
    [receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setServiceFee: TypedContractMethod<
    [token: AddressLike, _serviceFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setValidationCriteria: TypedContractMethod<
    [_assetTypeId: BigNumberish, _criteria: string],
    [void],
    "nonpayable"
  >;

  setupAllFieldRequirements: TypedContractMethod<[], [void], "nonpayable">;

  setupFieldRequirements: TypedContractMethod<
    [assetTypeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedAssetTypes: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  supportsAssetType: TypedContractMethod<
    [assetTypeId: BigNumberish],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateDeed: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateOperatingAgreement: TypedContractMethod<
    [operatingAgreement: string],
    [boolean],
    "view"
  >;

  validationCriteria: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  withdrawServiceFees: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CRITERIA_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "METADATA_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addCompatibleDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addFieldRequirementsBatch"
  ): TypedContractMethod<
    [
      assetTypeId: BigNumberish,
      criteriaFields: string[],
      definitionFields: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWhitelistedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "baseUri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clearFieldRequirements"
  ): TypedContractMethod<[assetTypeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "compatibleDeedNFTs"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deedMetadata"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deedNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultOperatingAgreement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultOperatingAgreementUri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBaseUri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyFeePercentage"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getServiceFee"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidationCriteria"
  ): TypedContractMethod<[assetTypeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_baseUri: string, _defaultOperatingAgreementUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isCompatibleDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenWhitelisted"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "operatingAgreementName"
  ): TypedContractMethod<[uri_: string], [string], "view">;
  getFunction(
    nameOrSignature: "operatingAgreements"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primaryDeedNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerOperatingAgreement"
  ): TypedContractMethod<[uri: string, name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeCompatibleDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOperatingAgreementName"
  ): TypedContractMethod<[_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWhitelistedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "serviceFee"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "serviceFeesBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAssetTypeSupport"
  ): TypedContractMethod<
    [_assetTypeId: BigNumberish, _isSupported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseUri"
  ): TypedContractMethod<[_newBaseUri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDeedMetadata"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _metadataUri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultOperatingAgreement"
  ): TypedContractMethod<[_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFundManager"
  ): TypedContractMethod<[_fundManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperatingAgreementName"
  ): TypedContractMethod<[_uri: string, _name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrimaryDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyFeePercentage"
  ): TypedContractMethod<[percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyReceiver"
  ): TypedContractMethod<[receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setServiceFee"
  ): TypedContractMethod<
    [token: AddressLike, _serviceFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidationCriteria"
  ): TypedContractMethod<
    [_assetTypeId: BigNumberish, _criteria: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupAllFieldRequirements"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setupFieldRequirements"
  ): TypedContractMethod<[assetTypeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedAssetTypes"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsAssetType"
  ): TypedContractMethod<[assetTypeId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateDeed"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "validateOperatingAgreement"
  ): TypedContractMethod<[operatingAgreement: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "validationCriteria"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawServiceFees"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CompatibleDeedNFTUpdated"
  ): TypedContractEvent<
    CompatibleDeedNFTUpdatedEvent.InputTuple,
    CompatibleDeedNFTUpdatedEvent.OutputTuple,
    CompatibleDeedNFTUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeedNFTUpdated"
  ): TypedContractEvent<
    DeedNFTUpdatedEvent.InputTuple,
    DeedNFTUpdatedEvent.OutputTuple,
    DeedNFTUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeedValidated"
  ): TypedContractEvent<
    DeedValidatedEvent.InputTuple,
    DeedValidatedEvent.OutputTuple,
    DeedValidatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultOperatingAgreementUpdated"
  ): TypedContractEvent<
    DefaultOperatingAgreementUpdatedEvent.InputTuple,
    DefaultOperatingAgreementUpdatedEvent.OutputTuple,
    DefaultOperatingAgreementUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FieldRequirementAdded"
  ): TypedContractEvent<
    FieldRequirementAddedEvent.InputTuple,
    FieldRequirementAddedEvent.OutputTuple,
    FieldRequirementAddedEvent.OutputObject
  >;
  getEvent(
    key: "FieldRequirementsCleared"
  ): TypedContractEvent<
    FieldRequirementsClearedEvent.InputTuple,
    FieldRequirementsClearedEvent.OutputTuple,
    FieldRequirementsClearedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OperatingAgreementRegistered"
  ): TypedContractEvent<
    OperatingAgreementRegisteredEvent.InputTuple,
    OperatingAgreementRegisteredEvent.OutputTuple,
    OperatingAgreementRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryDeedNFTUpdated"
  ): TypedContractEvent<
    PrimaryDeedNFTUpdatedEvent.InputTuple,
    PrimaryDeedNFTUpdatedEvent.OutputTuple,
    PrimaryDeedNFTUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceFeeUpdated"
  ): TypedContractEvent<
    ServiceFeeUpdatedEvent.InputTuple,
    ServiceFeeUpdatedEvent.OutputTuple,
    ServiceFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWhitelistStatusUpdated"
  ): TypedContractEvent<
    TokenWhitelistStatusUpdatedEvent.InputTuple,
    TokenWhitelistStatusUpdatedEvent.OutputTuple,
    TokenWhitelistStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationCriteriaUpdated"
  ): TypedContractEvent<
    ValidationCriteriaUpdatedEvent.InputTuple,
    ValidationCriteriaUpdatedEvent.OutputTuple,
    ValidationCriteriaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ValidationError"
  ): TypedContractEvent<
    ValidationErrorEvent.InputTuple,
    ValidationErrorEvent.OutputTuple,
    ValidationErrorEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CompatibleDeedNFTUpdated(address,bool)": TypedContractEvent<
      CompatibleDeedNFTUpdatedEvent.InputTuple,
      CompatibleDeedNFTUpdatedEvent.OutputTuple,
      CompatibleDeedNFTUpdatedEvent.OutputObject
    >;
    CompatibleDeedNFTUpdated: TypedContractEvent<
      CompatibleDeedNFTUpdatedEvent.InputTuple,
      CompatibleDeedNFTUpdatedEvent.OutputTuple,
      CompatibleDeedNFTUpdatedEvent.OutputObject
    >;

    "DeedNFTUpdated(address)": TypedContractEvent<
      DeedNFTUpdatedEvent.InputTuple,
      DeedNFTUpdatedEvent.OutputTuple,
      DeedNFTUpdatedEvent.OutputObject
    >;
    DeedNFTUpdated: TypedContractEvent<
      DeedNFTUpdatedEvent.InputTuple,
      DeedNFTUpdatedEvent.OutputTuple,
      DeedNFTUpdatedEvent.OutputObject
    >;

    "DeedValidated(uint256,bool)": TypedContractEvent<
      DeedValidatedEvent.InputTuple,
      DeedValidatedEvent.OutputTuple,
      DeedValidatedEvent.OutputObject
    >;
    DeedValidated: TypedContractEvent<
      DeedValidatedEvent.InputTuple,
      DeedValidatedEvent.OutputTuple,
      DeedValidatedEvent.OutputObject
    >;

    "DefaultOperatingAgreementUpdated(string)": TypedContractEvent<
      DefaultOperatingAgreementUpdatedEvent.InputTuple,
      DefaultOperatingAgreementUpdatedEvent.OutputTuple,
      DefaultOperatingAgreementUpdatedEvent.OutputObject
    >;
    DefaultOperatingAgreementUpdated: TypedContractEvent<
      DefaultOperatingAgreementUpdatedEvent.InputTuple,
      DefaultOperatingAgreementUpdatedEvent.OutputTuple,
      DefaultOperatingAgreementUpdatedEvent.OutputObject
    >;

    "FieldRequirementAdded(uint256,string,string)": TypedContractEvent<
      FieldRequirementAddedEvent.InputTuple,
      FieldRequirementAddedEvent.OutputTuple,
      FieldRequirementAddedEvent.OutputObject
    >;
    FieldRequirementAdded: TypedContractEvent<
      FieldRequirementAddedEvent.InputTuple,
      FieldRequirementAddedEvent.OutputTuple,
      FieldRequirementAddedEvent.OutputObject
    >;

    "FieldRequirementsCleared(uint256)": TypedContractEvent<
      FieldRequirementsClearedEvent.InputTuple,
      FieldRequirementsClearedEvent.OutputTuple,
      FieldRequirementsClearedEvent.OutputObject
    >;
    FieldRequirementsCleared: TypedContractEvent<
      FieldRequirementsClearedEvent.InputTuple,
      FieldRequirementsClearedEvent.OutputTuple,
      FieldRequirementsClearedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OperatingAgreementRegistered(string,string)": TypedContractEvent<
      OperatingAgreementRegisteredEvent.InputTuple,
      OperatingAgreementRegisteredEvent.OutputTuple,
      OperatingAgreementRegisteredEvent.OutputObject
    >;
    OperatingAgreementRegistered: TypedContractEvent<
      OperatingAgreementRegisteredEvent.InputTuple,
      OperatingAgreementRegisteredEvent.OutputTuple,
      OperatingAgreementRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrimaryDeedNFTUpdated(address)": TypedContractEvent<
      PrimaryDeedNFTUpdatedEvent.InputTuple,
      PrimaryDeedNFTUpdatedEvent.OutputTuple,
      PrimaryDeedNFTUpdatedEvent.OutputObject
    >;
    PrimaryDeedNFTUpdated: TypedContractEvent<
      PrimaryDeedNFTUpdatedEvent.InputTuple,
      PrimaryDeedNFTUpdatedEvent.OutputTuple,
      PrimaryDeedNFTUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ServiceFeeUpdated(address,uint256)": TypedContractEvent<
      ServiceFeeUpdatedEvent.InputTuple,
      ServiceFeeUpdatedEvent.OutputTuple,
      ServiceFeeUpdatedEvent.OutputObject
    >;
    ServiceFeeUpdated: TypedContractEvent<
      ServiceFeeUpdatedEvent.InputTuple,
      ServiceFeeUpdatedEvent.OutputTuple,
      ServiceFeeUpdatedEvent.OutputObject
    >;

    "TokenWhitelistStatusUpdated(address,bool)": TypedContractEvent<
      TokenWhitelistStatusUpdatedEvent.InputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputObject
    >;
    TokenWhitelistStatusUpdated: TypedContractEvent<
      TokenWhitelistStatusUpdatedEvent.InputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "ValidationCriteriaUpdated(uint256,string)": TypedContractEvent<
      ValidationCriteriaUpdatedEvent.InputTuple,
      ValidationCriteriaUpdatedEvent.OutputTuple,
      ValidationCriteriaUpdatedEvent.OutputObject
    >;
    ValidationCriteriaUpdated: TypedContractEvent<
      ValidationCriteriaUpdatedEvent.InputTuple,
      ValidationCriteriaUpdatedEvent.OutputTuple,
      ValidationCriteriaUpdatedEvent.OutputObject
    >;

    "ValidationError(uint256,string)": TypedContractEvent<
      ValidationErrorEvent.InputTuple,
      ValidationErrorEvent.OutputTuple,
      ValidationErrorEvent.OutputObject
    >;
    ValidationError: TypedContractEvent<
      ValidationErrorEvent.InputTuple,
      ValidationErrorEvent.OutputTuple,
      ValidationErrorEvent.OutputObject
    >;
  };
}
