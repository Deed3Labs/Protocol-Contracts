/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MetadataRendererInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "VALIDATOR_ROLE"
      | "assetTypeImageURIs"
      | "baseURI"
      | "compatibleDeedContracts"
      | "deedContractsList"
      | "deedNFT"
      | "getCompatibleDeedContracts"
      | "getRoleAdmin"
      | "getTokenDocument"
      | "getTokenDocumentTypes"
      | "getTokenFeatures"
      | "getTokenGallery"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "invalidatedImageURI"
      | "isCompatibleDeedContract"
      | "manageCompatibleDeedContract"
      | "manageTokenDocument"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setAssetTypeImageURI"
      | "setBaseURI"
      | "setDeedNFT"
      | "setInvalidatedImageURI"
      | "setTokenCustomMetadata"
      | "setTokenFeatures"
      | "setTokenGallery"
      | "supportsInterface"
      | "tokenCustomMetadata"
      | "tokenDocumentTypes"
      | "tokenDocuments"
      | "tokenFeatures"
      | "tokenGalleryImages"
      | "tokenURI"
      | "transferOwnership"
      | "updateAssetDetails"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "CompatibleDeedContractAdded"
      | "CompatibleDeedContractRemoved"
      | "EquipmentDetailsUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "PropertyDetailsUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenCustomMetadataUpdated"
      | "TokenDocumentUpdated"
      | "TokenFeaturesUpdated"
      | "TokenGalleryUpdated"
      | "Upgraded"
      | "VehicleDetailsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeImageURIs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compatibleDeedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deedContractsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deedNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCompatibleDeedContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDocument",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDocumentTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFeatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenGallery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "invalidatedImageURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCompatibleDeedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manageCompatibleDeedContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "manageTokenDocument",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetTypeImageURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvalidatedImageURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCustomMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFeatures",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenGallery",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCustomMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDocumentTypes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDocuments",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFeatures",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenGalleryImages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAssetDetails",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeImageURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compatibleDeedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deedContractsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompatibleDeedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDocumentTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenGallery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidatedImageURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCompatibleDeedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageCompatibleDeedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageTokenDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetTypeImageURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDeedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInvalidatedImageURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCustomMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenGallery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCustomMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDocumentTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenGalleryImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompatibleDeedContractAddedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompatibleDeedContractRemovedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EquipmentDetailsUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyDetailsUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCustomMetadataUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDocumentUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, docType: string];
  export type OutputTuple = [tokenId: bigint, docType: string];
  export interface OutputObject {
    tokenId: bigint;
    docType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenFeaturesUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenGalleryUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VehicleDetailsUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MetadataRenderer extends BaseContract {
  connect(runner?: ContractRunner | null): MetadataRenderer;
  waitForDeployment(): Promise<this>;

  interface: MetadataRendererInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  VALIDATOR_ROLE: TypedContractMethod<[], [string], "view">;

  assetTypeImageURIs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  baseURI: TypedContractMethod<[], [string], "view">;

  compatibleDeedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  deedContractsList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  deedNFT: TypedContractMethod<[], [string], "view">;

  getCompatibleDeedContracts: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenDocument: TypedContractMethod<
    [tokenId: BigNumberish, docType: string],
    [string],
    "view"
  >;

  getTokenDocumentTypes: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenFeatures: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenGallery: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[_baseURI: string], [void], "nonpayable">;

  invalidatedImageURI: TypedContractMethod<[], [string], "view">;

  isCompatibleDeedContract: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  manageCompatibleDeedContract: TypedContractMethod<
    [contractAddress: AddressLike, isAdd: boolean],
    [void],
    "nonpayable"
  >;

  manageTokenDocument: TypedContractMethod<
    [
      tokenId: BigNumberish,
      docType: string,
      documentURI: string,
      isRemove: boolean
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetTypeImageURI: TypedContractMethod<
    [assetType: BigNumberish, imageURI: string],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[_baseURI: string], [void], "nonpayable">;

  setDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  setInvalidatedImageURI: TypedContractMethod<
    [imageURI: string],
    [void],
    "nonpayable"
  >;

  setTokenCustomMetadata: TypedContractMethod<
    [tokenId: BigNumberish, metadata: string],
    [void],
    "nonpayable"
  >;

  setTokenFeatures: TypedContractMethod<
    [tokenId: BigNumberish, features: string[]],
    [void],
    "nonpayable"
  >;

  setTokenGallery: TypedContractMethod<
    [tokenId: BigNumberish, imageUrls: string[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenCustomMetadata: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  tokenDocumentTypes: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  tokenDocuments: TypedContractMethod<
    [arg0: BigNumberish, arg1: string],
    [string],
    "view"
  >;

  tokenFeatures: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  tokenGalleryImages: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  tokenURI: TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAssetDetails: TypedContractMethod<
    [tokenId: BigNumberish, assetType: BigNumberish, details: string],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetTypeImageURIs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "compatibleDeedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deedContractsList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deedNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCompatibleDeedContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenDocument"
  ): TypedContractMethod<
    [tokenId: BigNumberish, docType: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenDocumentTypes"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenFeatures"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenGallery"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "invalidatedImageURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isCompatibleDeedContract"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "manageCompatibleDeedContract"
  ): TypedContractMethod<
    [contractAddress: AddressLike, isAdd: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manageTokenDocument"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      docType: string,
      documentURI: string,
      isRemove: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetTypeImageURI"
  ): TypedContractMethod<
    [assetType: BigNumberish, imageURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInvalidatedImageURI"
  ): TypedContractMethod<[imageURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenCustomMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenFeatures"
  ): TypedContractMethod<
    [tokenId: BigNumberish, features: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenGallery"
  ): TypedContractMethod<
    [tokenId: BigNumberish, imageUrls: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenCustomMetadata"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenDocumentTypes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenDocuments"
  ): TypedContractMethod<[arg0: BigNumberish, arg1: string], [string], "view">;
  getFunction(
    nameOrSignature: "tokenFeatures"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenGalleryImages"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAssetDetails"
  ): TypedContractMethod<
    [tokenId: BigNumberish, assetType: BigNumberish, details: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CompatibleDeedContractAdded"
  ): TypedContractEvent<
    CompatibleDeedContractAddedEvent.InputTuple,
    CompatibleDeedContractAddedEvent.OutputTuple,
    CompatibleDeedContractAddedEvent.OutputObject
  >;
  getEvent(
    key: "CompatibleDeedContractRemoved"
  ): TypedContractEvent<
    CompatibleDeedContractRemovedEvent.InputTuple,
    CompatibleDeedContractRemovedEvent.OutputTuple,
    CompatibleDeedContractRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EquipmentDetailsUpdated"
  ): TypedContractEvent<
    EquipmentDetailsUpdatedEvent.InputTuple,
    EquipmentDetailsUpdatedEvent.OutputTuple,
    EquipmentDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PropertyDetailsUpdated"
  ): TypedContractEvent<
    PropertyDetailsUpdatedEvent.InputTuple,
    PropertyDetailsUpdatedEvent.OutputTuple,
    PropertyDetailsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCustomMetadataUpdated"
  ): TypedContractEvent<
    TokenCustomMetadataUpdatedEvent.InputTuple,
    TokenCustomMetadataUpdatedEvent.OutputTuple,
    TokenCustomMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDocumentUpdated"
  ): TypedContractEvent<
    TokenDocumentUpdatedEvent.InputTuple,
    TokenDocumentUpdatedEvent.OutputTuple,
    TokenDocumentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenFeaturesUpdated"
  ): TypedContractEvent<
    TokenFeaturesUpdatedEvent.InputTuple,
    TokenFeaturesUpdatedEvent.OutputTuple,
    TokenFeaturesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenGalleryUpdated"
  ): TypedContractEvent<
    TokenGalleryUpdatedEvent.InputTuple,
    TokenGalleryUpdatedEvent.OutputTuple,
    TokenGalleryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VehicleDetailsUpdated"
  ): TypedContractEvent<
    VehicleDetailsUpdatedEvent.InputTuple,
    VehicleDetailsUpdatedEvent.OutputTuple,
    VehicleDetailsUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CompatibleDeedContractAdded(address)": TypedContractEvent<
      CompatibleDeedContractAddedEvent.InputTuple,
      CompatibleDeedContractAddedEvent.OutputTuple,
      CompatibleDeedContractAddedEvent.OutputObject
    >;
    CompatibleDeedContractAdded: TypedContractEvent<
      CompatibleDeedContractAddedEvent.InputTuple,
      CompatibleDeedContractAddedEvent.OutputTuple,
      CompatibleDeedContractAddedEvent.OutputObject
    >;

    "CompatibleDeedContractRemoved(address)": TypedContractEvent<
      CompatibleDeedContractRemovedEvent.InputTuple,
      CompatibleDeedContractRemovedEvent.OutputTuple,
      CompatibleDeedContractRemovedEvent.OutputObject
    >;
    CompatibleDeedContractRemoved: TypedContractEvent<
      CompatibleDeedContractRemovedEvent.InputTuple,
      CompatibleDeedContractRemovedEvent.OutputTuple,
      CompatibleDeedContractRemovedEvent.OutputObject
    >;

    "EquipmentDetailsUpdated(uint256)": TypedContractEvent<
      EquipmentDetailsUpdatedEvent.InputTuple,
      EquipmentDetailsUpdatedEvent.OutputTuple,
      EquipmentDetailsUpdatedEvent.OutputObject
    >;
    EquipmentDetailsUpdated: TypedContractEvent<
      EquipmentDetailsUpdatedEvent.InputTuple,
      EquipmentDetailsUpdatedEvent.OutputTuple,
      EquipmentDetailsUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PropertyDetailsUpdated(uint256)": TypedContractEvent<
      PropertyDetailsUpdatedEvent.InputTuple,
      PropertyDetailsUpdatedEvent.OutputTuple,
      PropertyDetailsUpdatedEvent.OutputObject
    >;
    PropertyDetailsUpdated: TypedContractEvent<
      PropertyDetailsUpdatedEvent.InputTuple,
      PropertyDetailsUpdatedEvent.OutputTuple,
      PropertyDetailsUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenCustomMetadataUpdated(uint256)": TypedContractEvent<
      TokenCustomMetadataUpdatedEvent.InputTuple,
      TokenCustomMetadataUpdatedEvent.OutputTuple,
      TokenCustomMetadataUpdatedEvent.OutputObject
    >;
    TokenCustomMetadataUpdated: TypedContractEvent<
      TokenCustomMetadataUpdatedEvent.InputTuple,
      TokenCustomMetadataUpdatedEvent.OutputTuple,
      TokenCustomMetadataUpdatedEvent.OutputObject
    >;

    "TokenDocumentUpdated(uint256,string)": TypedContractEvent<
      TokenDocumentUpdatedEvent.InputTuple,
      TokenDocumentUpdatedEvent.OutputTuple,
      TokenDocumentUpdatedEvent.OutputObject
    >;
    TokenDocumentUpdated: TypedContractEvent<
      TokenDocumentUpdatedEvent.InputTuple,
      TokenDocumentUpdatedEvent.OutputTuple,
      TokenDocumentUpdatedEvent.OutputObject
    >;

    "TokenFeaturesUpdated(uint256)": TypedContractEvent<
      TokenFeaturesUpdatedEvent.InputTuple,
      TokenFeaturesUpdatedEvent.OutputTuple,
      TokenFeaturesUpdatedEvent.OutputObject
    >;
    TokenFeaturesUpdated: TypedContractEvent<
      TokenFeaturesUpdatedEvent.InputTuple,
      TokenFeaturesUpdatedEvent.OutputTuple,
      TokenFeaturesUpdatedEvent.OutputObject
    >;

    "TokenGalleryUpdated(uint256)": TypedContractEvent<
      TokenGalleryUpdatedEvent.InputTuple,
      TokenGalleryUpdatedEvent.OutputTuple,
      TokenGalleryUpdatedEvent.OutputObject
    >;
    TokenGalleryUpdated: TypedContractEvent<
      TokenGalleryUpdatedEvent.InputTuple,
      TokenGalleryUpdatedEvent.OutputTuple,
      TokenGalleryUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VehicleDetailsUpdated(uint256)": TypedContractEvent<
      VehicleDetailsUpdatedEvent.InputTuple,
      VehicleDetailsUpdatedEvent.OutputTuple,
      VehicleDetailsUpdatedEvent.OutputObject
    >;
    VehicleDetailsUpdated: TypedContractEvent<
      VehicleDetailsUpdatedEvent.InputTuple,
      VehicleDetailsUpdatedEvent.OutputTuple,
      VehicleDetailsUpdatedEvent.OutputObject
    >;
  };
}
