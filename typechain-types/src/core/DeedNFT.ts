/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DeedNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "VALIDATOR_ROLE"
      | "addMinter"
      | "approve"
      | "balanceOf"
      | "burnAsset"
      | "burnBatchAssets"
      | "contractURI"
      | "getApproved"
      | "getRoleAdmin"
      | "getTraitKeys"
      | "getTraitMetadataURI"
      | "getTraitName"
      | "getTraitValue"
      | "getTraitValues"
      | "getTransferValidationFunction"
      | "getTransferValidator"
      | "getValidationStatus"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "isApprovedMarketplace"
      | "isRoyaltyEnforced"
      | "metadataRenderer"
      | "mintAsset"
      | "name"
      | "nexttokenId"
      | "ownerOf"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "removeMinter"
      | "renounceRole"
      | "revokeRole"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setApprovedMarketplace"
      | "setContractURI"
      | "setDefaultValidator"
      | "setMetadataRenderer"
      | "setRoyaltyEnforcement"
      | "setToDefaultSecurityPolicy"
      | "setTransferValidator"
      | "setValidatorRegistry"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "unpause"
      | "updateMetadata"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validateDeed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "BeaconUpgraded"
      | "ContractURIUpdated"
      | "DeedNFTBurned"
      | "DeedNFTMetadataUpdated"
      | "DeedNFTMinted"
      | "DeedNFTValidatedChanged"
      | "Initialized"
      | "MarketplaceApproved"
      | "MetadataRendererUpdated"
      | "MetadataUpdate"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoyaltyEnforcementChanged"
      | "TokenValidated"
      | "TraitMetadataURIUpdated"
      | "TraitUpdated"
      | "Transfer"
      | "TransferValidatorUpdated"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatchAssets",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitValue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitValues",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferValidationFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidationStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedMarketplace",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoyaltyEnforced",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataRenderer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAsset",
    values: [AddressLike, BigNumberish, string, string, string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nexttokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedMarketplace",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataRenderer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyEnforcement",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setToDefaultSecurityPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDeed",
    values: [BigNumberish, boolean, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnBatchAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoyaltyEnforced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nexttokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyEnforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToDefaultSecurityPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDeed",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractURIUpdatedEvent {
  export type InputTuple = [newURI: string];
  export type OutputTuple = [newURI: string];
  export interface OutputObject {
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedNFTBurnedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedNFTMetadataUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedNFTMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    assetType: BigNumberish,
    minter: AddressLike,
    validator: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    assetType: bigint,
    minter: string,
    validator: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    assetType: bigint;
    minter: string;
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedNFTValidatedChangedEvent {
  export type InputTuple = [tokenId: BigNumberish, isValid: boolean];
  export type OutputTuple = [tokenId: bigint, isValid: boolean];
  export interface OutputObject {
    tokenId: bigint;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceApprovedEvent {
  export type InputTuple = [marketplace: AddressLike, approved: boolean];
  export type OutputTuple = [marketplace: string, approved: boolean];
  export interface OutputObject {
    marketplace: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataRendererUpdatedEvent {
  export type InputTuple = [renderer: AddressLike];
  export type OutputTuple = [renderer: string];
  export interface OutputObject {
    renderer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyEnforcementChangedEvent {
  export type InputTuple = [enforced: boolean];
  export type OutputTuple = [enforced: boolean];
  export interface OutputObject {
    enforced: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenValidatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    isValid: boolean,
    validator: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    isValid: boolean,
    validator: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    isValid: boolean;
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitMetadataURIUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitUpdatedEvent {
  export type InputTuple = [
    traitKey: BytesLike,
    tokenId: BigNumberish,
    traitValue: BytesLike
  ];
  export type OutputTuple = [
    traitKey: string,
    tokenId: bigint,
    traitValue: string
  ];
  export interface OutputObject {
    traitKey: string;
    tokenId: bigint;
    traitValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferValidatorUpdatedEvent {
  export type InputTuple = [
    oldValidator: AddressLike,
    newValidator: AddressLike
  ];
  export type OutputTuple = [oldValidator: string, newValidator: string];
  export interface OutputObject {
    oldValidator: string;
    newValidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeedNFT extends BaseContract {
  connect(runner?: ContractRunner | null): DeedNFT;
  waitForDeployment(): Promise<this>;

  interface: DeedNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  VALIDATOR_ROLE: TypedContractMethod<[], [string], "view">;

  addMinter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burnAsset: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  burnBatchAssets: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  contractURI: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTraitKeys: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getTraitMetadataURI: TypedContractMethod<[], [string], "view">;

  getTraitName: TypedContractMethod<[traitKey: BytesLike], [string], "view">;

  getTraitValue: TypedContractMethod<
    [tokenId: BigNumberish, traitKey: BytesLike],
    [string],
    "view"
  >;

  getTraitValues: TypedContractMethod<
    [tokenId: BigNumberish, traitKeys: BytesLike[]],
    [string[]],
    "view"
  >;

  getTransferValidationFunction: TypedContractMethod<
    [],
    [
      [string, boolean] & { functionSignature: string; isViewFunction: boolean }
    ],
    "view"
  >;

  getTransferValidator: TypedContractMethod<[], [string], "view">;

  getValidationStatus: TypedContractMethod<
    [tokenId: BigNumberish],
    [[boolean, string] & { isValidated: boolean; validator: string }],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_defaultValidator: AddressLike, _validatorRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedMarketplace: TypedContractMethod<
    [marketplace: AddressLike],
    [boolean],
    "view"
  >;

  isRoyaltyEnforced: TypedContractMethod<[], [boolean], "view">;

  metadataRenderer: TypedContractMethod<[], [string], "view">;

  mintAsset: TypedContractMethod<
    [
      owner: AddressLike,
      assetType: BigNumberish,
      ipfsDetailsHash: string,
      definition: string,
      configuration: string,
      validatorAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nexttokenId: TypedContractMethod<[], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setApprovedMarketplace: TypedContractMethod<
    [marketplace: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setContractURI: TypedContractMethod<[newURI: string], [void], "nonpayable">;

  setDefaultValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  setMetadataRenderer: TypedContractMethod<
    [renderer: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyaltyEnforcement: TypedContractMethod<
    [enforced: boolean],
    [void],
    "nonpayable"
  >;

  setToDefaultSecurityPolicy: TypedContractMethod<[], [void], "nonpayable">;

  setTransferValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  setValidatorRegistry: TypedContractMethod<
    [registry: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMetadata: TypedContractMethod<
    [
      tokenId: BigNumberish,
      ipfsDetailsHash: string,
      operatingAgreement: string,
      definition: string,
      configuration: string
    ],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateDeed: TypedContractMethod<
    [tokenId: BigNumberish, isValid: boolean, validatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnAsset"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnBatchAssets"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTraitKeys"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTraitMetadataURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTraitName"
  ): TypedContractMethod<[traitKey: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTraitValue"
  ): TypedContractMethod<
    [tokenId: BigNumberish, traitKey: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTraitValues"
  ): TypedContractMethod<
    [tokenId: BigNumberish, traitKeys: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferValidationFunction"
  ): TypedContractMethod<
    [],
    [
      [string, boolean] & { functionSignature: string; isViewFunction: boolean }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferValidator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getValidationStatus"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[boolean, string] & { isValidated: boolean; validator: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_defaultValidator: AddressLike, _validatorRegistry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedMarketplace"
  ): TypedContractMethod<[marketplace: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRoyaltyEnforced"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "metadataRenderer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintAsset"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      assetType: BigNumberish,
      ipfsDetailsHash: string,
      definition: string,
      configuration: string,
      validatorAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nexttokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovedMarketplace"
  ): TypedContractMethod<
    [marketplace: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[newURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadataRenderer"
  ): TypedContractMethod<[renderer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyEnforcement"
  ): TypedContractMethod<[enforced: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setToDefaultSecurityPolicy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setValidatorRegistry"
  ): TypedContractMethod<[registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      ipfsDetailsHash: string,
      operatingAgreement: string,
      definition: string,
      configuration: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateDeed"
  ): TypedContractMethod<
    [tokenId: BigNumberish, isValid: boolean, validatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ContractURIUpdated"
  ): TypedContractEvent<
    ContractURIUpdatedEvent.InputTuple,
    ContractURIUpdatedEvent.OutputTuple,
    ContractURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeedNFTBurned"
  ): TypedContractEvent<
    DeedNFTBurnedEvent.InputTuple,
    DeedNFTBurnedEvent.OutputTuple,
    DeedNFTBurnedEvent.OutputObject
  >;
  getEvent(
    key: "DeedNFTMetadataUpdated"
  ): TypedContractEvent<
    DeedNFTMetadataUpdatedEvent.InputTuple,
    DeedNFTMetadataUpdatedEvent.OutputTuple,
    DeedNFTMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeedNFTMinted"
  ): TypedContractEvent<
    DeedNFTMintedEvent.InputTuple,
    DeedNFTMintedEvent.OutputTuple,
    DeedNFTMintedEvent.OutputObject
  >;
  getEvent(
    key: "DeedNFTValidatedChanged"
  ): TypedContractEvent<
    DeedNFTValidatedChangedEvent.InputTuple,
    DeedNFTValidatedChangedEvent.OutputTuple,
    DeedNFTValidatedChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceApproved"
  ): TypedContractEvent<
    MarketplaceApprovedEvent.InputTuple,
    MarketplaceApprovedEvent.OutputTuple,
    MarketplaceApprovedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataRendererUpdated"
  ): TypedContractEvent<
    MetadataRendererUpdatedEvent.InputTuple,
    MetadataRendererUpdatedEvent.OutputTuple,
    MetadataRendererUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyEnforcementChanged"
  ): TypedContractEvent<
    RoyaltyEnforcementChangedEvent.InputTuple,
    RoyaltyEnforcementChangedEvent.OutputTuple,
    RoyaltyEnforcementChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenValidated"
  ): TypedContractEvent<
    TokenValidatedEvent.InputTuple,
    TokenValidatedEvent.OutputTuple,
    TokenValidatedEvent.OutputObject
  >;
  getEvent(
    key: "TraitMetadataURIUpdated"
  ): TypedContractEvent<
    TraitMetadataURIUpdatedEvent.InputTuple,
    TraitMetadataURIUpdatedEvent.OutputTuple,
    TraitMetadataURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TraitUpdated"
  ): TypedContractEvent<
    TraitUpdatedEvent.InputTuple,
    TraitUpdatedEvent.OutputTuple,
    TraitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferValidatorUpdated"
  ): TypedContractEvent<
    TransferValidatorUpdatedEvent.InputTuple,
    TransferValidatorUpdatedEvent.OutputTuple,
    TransferValidatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "ContractURIUpdated(string)": TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;
    ContractURIUpdated: TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;

    "DeedNFTBurned(uint256)": TypedContractEvent<
      DeedNFTBurnedEvent.InputTuple,
      DeedNFTBurnedEvent.OutputTuple,
      DeedNFTBurnedEvent.OutputObject
    >;
    DeedNFTBurned: TypedContractEvent<
      DeedNFTBurnedEvent.InputTuple,
      DeedNFTBurnedEvent.OutputTuple,
      DeedNFTBurnedEvent.OutputObject
    >;

    "DeedNFTMetadataUpdated(uint256)": TypedContractEvent<
      DeedNFTMetadataUpdatedEvent.InputTuple,
      DeedNFTMetadataUpdatedEvent.OutputTuple,
      DeedNFTMetadataUpdatedEvent.OutputObject
    >;
    DeedNFTMetadataUpdated: TypedContractEvent<
      DeedNFTMetadataUpdatedEvent.InputTuple,
      DeedNFTMetadataUpdatedEvent.OutputTuple,
      DeedNFTMetadataUpdatedEvent.OutputObject
    >;

    "DeedNFTMinted(uint256,uint8,address,address)": TypedContractEvent<
      DeedNFTMintedEvent.InputTuple,
      DeedNFTMintedEvent.OutputTuple,
      DeedNFTMintedEvent.OutputObject
    >;
    DeedNFTMinted: TypedContractEvent<
      DeedNFTMintedEvent.InputTuple,
      DeedNFTMintedEvent.OutputTuple,
      DeedNFTMintedEvent.OutputObject
    >;

    "DeedNFTValidatedChanged(uint256,bool)": TypedContractEvent<
      DeedNFTValidatedChangedEvent.InputTuple,
      DeedNFTValidatedChangedEvent.OutputTuple,
      DeedNFTValidatedChangedEvent.OutputObject
    >;
    DeedNFTValidatedChanged: TypedContractEvent<
      DeedNFTValidatedChangedEvent.InputTuple,
      DeedNFTValidatedChangedEvent.OutputTuple,
      DeedNFTValidatedChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MarketplaceApproved(address,bool)": TypedContractEvent<
      MarketplaceApprovedEvent.InputTuple,
      MarketplaceApprovedEvent.OutputTuple,
      MarketplaceApprovedEvent.OutputObject
    >;
    MarketplaceApproved: TypedContractEvent<
      MarketplaceApprovedEvent.InputTuple,
      MarketplaceApprovedEvent.OutputTuple,
      MarketplaceApprovedEvent.OutputObject
    >;

    "MetadataRendererUpdated(address)": TypedContractEvent<
      MetadataRendererUpdatedEvent.InputTuple,
      MetadataRendererUpdatedEvent.OutputTuple,
      MetadataRendererUpdatedEvent.OutputObject
    >;
    MetadataRendererUpdated: TypedContractEvent<
      MetadataRendererUpdatedEvent.InputTuple,
      MetadataRendererUpdatedEvent.OutputTuple,
      MetadataRendererUpdatedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoyaltyEnforcementChanged(bool)": TypedContractEvent<
      RoyaltyEnforcementChangedEvent.InputTuple,
      RoyaltyEnforcementChangedEvent.OutputTuple,
      RoyaltyEnforcementChangedEvent.OutputObject
    >;
    RoyaltyEnforcementChanged: TypedContractEvent<
      RoyaltyEnforcementChangedEvent.InputTuple,
      RoyaltyEnforcementChangedEvent.OutputTuple,
      RoyaltyEnforcementChangedEvent.OutputObject
    >;

    "TokenValidated(uint256,bool,address)": TypedContractEvent<
      TokenValidatedEvent.InputTuple,
      TokenValidatedEvent.OutputTuple,
      TokenValidatedEvent.OutputObject
    >;
    TokenValidated: TypedContractEvent<
      TokenValidatedEvent.InputTuple,
      TokenValidatedEvent.OutputTuple,
      TokenValidatedEvent.OutputObject
    >;

    "TraitMetadataURIUpdated()": TypedContractEvent<
      TraitMetadataURIUpdatedEvent.InputTuple,
      TraitMetadataURIUpdatedEvent.OutputTuple,
      TraitMetadataURIUpdatedEvent.OutputObject
    >;
    TraitMetadataURIUpdated: TypedContractEvent<
      TraitMetadataURIUpdatedEvent.InputTuple,
      TraitMetadataURIUpdatedEvent.OutputTuple,
      TraitMetadataURIUpdatedEvent.OutputObject
    >;

    "TraitUpdated(bytes32,uint256,bytes)": TypedContractEvent<
      TraitUpdatedEvent.InputTuple,
      TraitUpdatedEvent.OutputTuple,
      TraitUpdatedEvent.OutputObject
    >;
    TraitUpdated: TypedContractEvent<
      TraitUpdatedEvent.InputTuple,
      TraitUpdatedEvent.OutputTuple,
      TraitUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferValidatorUpdated(address,address)": TypedContractEvent<
      TransferValidatorUpdatedEvent.InputTuple,
      TransferValidatorUpdatedEvent.OutputTuple,
      TransferValidatorUpdatedEvent.OutputObject
    >;
    TransferValidatorUpdated: TypedContractEvent<
      TransferValidatorUpdatedEvent.InputTuple,
      TransferValidatorUpdatedEvent.OutputTuple,
      TransferValidatorUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
