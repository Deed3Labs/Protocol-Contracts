/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFundManager {
  export type DeedMintDataStruct = {
    assetType: BigNumberish;
    ipfsDetailsHash: string;
    definition: string;
    configuration: string;
    validatorContract: AddressLike;
    token: AddressLike;
  };

  export type DeedMintDataStructOutput = [
    assetType: bigint,
    ipfsDetailsHash: string,
    definition: string,
    configuration: string,
    validatorContract: string,
    token: string
  ] & {
    assetType: bigint;
    ipfsDetailsHash: string;
    definition: string;
    configuration: string;
    validatorContract: string;
    token: string;
  };
}

export interface FundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_MANAGER_ROLE"
      | "MINTER_ROLE"
      | "commissionPercentage"
      | "deedNFT"
      | "deedNFTContract"
      | "feeReceiver"
      | "formatFee"
      | "getCommissionBalance"
      | "getCommissionPercentage"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "mintBatchDeedNFT"
      | "mintDeedNFT"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setCommissionPercentage"
      | "setDeedNFT"
      | "setFeeReceiver"
      | "setValidatorRegistry"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validatorRegistry"
      | "withdrawValidatorFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "CommissionPercentageUpdated"
      | "DeedMinted"
      | "DeedNFTUpdated"
      | "FeeReceiverUpdated"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ServiceFeeCollected"
      | "Upgraded"
      | "ValidatorFeesWithdrawn"
      | "ValidatorRegistryUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commissionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deedNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deedNFTContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "formatFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatchDeedNFT",
    values: [IFundManager.DeedMintDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintDeedNFT",
    values: [
      AddressLike,
      BigNumberish,
      string,
      string,
      string,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeedNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawValidatorFees",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deedNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "formatFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBatchDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintDeedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDeedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawValidatorFees",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommissionPercentageUpdatedEvent {
  export type InputTuple = [newCommissionPercentage: BigNumberish];
  export type OutputTuple = [newCommissionPercentage: bigint];
  export interface OutputObject {
    newCommissionPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    validator: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, owner: string, validator: string];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeedNFTUpdatedEvent {
  export type InputTuple = [newDeedNFT: AddressLike];
  export type OutputTuple = [newDeedNFT: string];
  export interface OutputObject {
    newDeedNFT: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverUpdatedEvent {
  export type InputTuple = [newFeeReceiver: AddressLike];
  export type OutputTuple = [newFeeReceiver: string];
  export interface OutputObject {
    newFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceFeeCollectedEvent {
  export type InputTuple = [
    validator: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    commission: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    token: string,
    amount: bigint,
    commission: bigint
  ];
  export interface OutputObject {
    validator: string;
    token: string;
    amount: bigint;
    commission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorFeesWithdrawnEvent {
  export type InputTuple = [
    validator: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    validator: string,
    token: string,
    amount: bigint,
    recipient: string
  ];
  export interface OutputObject {
    validator: string;
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRegistryUpdatedEvent {
  export type InputTuple = [newValidatorRegistry: AddressLike];
  export type OutputTuple = [newValidatorRegistry: string];
  export interface OutputObject {
    newValidatorRegistry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundManager extends BaseContract {
  connect(runner?: ContractRunner | null): FundManager;
  waitForDeployment(): Promise<this>;

  interface: FundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  commissionPercentage: TypedContractMethod<[], [bigint], "view">;

  deedNFT: TypedContractMethod<[], [string], "view">;

  deedNFTContract: TypedContractMethod<[], [string], "view">;

  feeReceiver: TypedContractMethod<[], [string], "view">;

  formatFee: TypedContractMethod<[amount: BigNumberish], [string], "view">;

  getCommissionBalance: TypedContractMethod<
    [validatorContract: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getCommissionPercentage: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _deedNFT: AddressLike,
      _validatorRegistry: AddressLike,
      initialCommissionPercentage: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  mintBatchDeedNFT: TypedContractMethod<
    [deeds: IFundManager.DeedMintDataStruct[]],
    [bigint[]],
    "nonpayable"
  >;

  mintDeedNFT: TypedContractMethod<
    [
      owner: AddressLike,
      assetType: BigNumberish,
      ipfsDetailsHash: string,
      definition: string,
      configuration: string,
      validatorAddress: AddressLike,
      token: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCommissionPercentage: TypedContractMethod<
    [newCommissionPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDeedNFT: TypedContractMethod<
    [_deedNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeReceiver: TypedContractMethod<
    [_feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setValidatorRegistry: TypedContractMethod<
    [_validatorRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validatorRegistry: TypedContractMethod<[], [string], "view">;

  withdrawValidatorFees: TypedContractMethod<
    [validatorContract: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "commissionPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deedNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deedNFTContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "formatFee"
  ): TypedContractMethod<[amount: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCommissionBalance"
  ): TypedContractMethod<
    [validatorContract: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCommissionPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _deedNFT: AddressLike,
      _validatorRegistry: AddressLike,
      initialCommissionPercentage: BigNumberish,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBatchDeedNFT"
  ): TypedContractMethod<
    [deeds: IFundManager.DeedMintDataStruct[]],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintDeedNFT"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      assetType: BigNumberish,
      ipfsDetailsHash: string,
      definition: string,
      configuration: string,
      validatorAddress: AddressLike,
      token: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCommissionPercentage"
  ): TypedContractMethod<
    [newCommissionPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeedNFT"
  ): TypedContractMethod<[_deedNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiver"
  ): TypedContractMethod<[_feeReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setValidatorRegistry"
  ): TypedContractMethod<
    [_validatorRegistry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validatorRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawValidatorFees"
  ): TypedContractMethod<
    [validatorContract: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CommissionPercentageUpdated"
  ): TypedContractEvent<
    CommissionPercentageUpdatedEvent.InputTuple,
    CommissionPercentageUpdatedEvent.OutputTuple,
    CommissionPercentageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeedMinted"
  ): TypedContractEvent<
    DeedMintedEvent.InputTuple,
    DeedMintedEvent.OutputTuple,
    DeedMintedEvent.OutputObject
  >;
  getEvent(
    key: "DeedNFTUpdated"
  ): TypedContractEvent<
    DeedNFTUpdatedEvent.InputTuple,
    DeedNFTUpdatedEvent.OutputTuple,
    DeedNFTUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceiverUpdated"
  ): TypedContractEvent<
    FeeReceiverUpdatedEvent.InputTuple,
    FeeReceiverUpdatedEvent.OutputTuple,
    FeeReceiverUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceFeeCollected"
  ): TypedContractEvent<
    ServiceFeeCollectedEvent.InputTuple,
    ServiceFeeCollectedEvent.OutputTuple,
    ServiceFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorFeesWithdrawn"
  ): TypedContractEvent<
    ValidatorFeesWithdrawnEvent.InputTuple,
    ValidatorFeesWithdrawnEvent.OutputTuple,
    ValidatorFeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRegistryUpdated"
  ): TypedContractEvent<
    ValidatorRegistryUpdatedEvent.InputTuple,
    ValidatorRegistryUpdatedEvent.OutputTuple,
    ValidatorRegistryUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CommissionPercentageUpdated(uint256)": TypedContractEvent<
      CommissionPercentageUpdatedEvent.InputTuple,
      CommissionPercentageUpdatedEvent.OutputTuple,
      CommissionPercentageUpdatedEvent.OutputObject
    >;
    CommissionPercentageUpdated: TypedContractEvent<
      CommissionPercentageUpdatedEvent.InputTuple,
      CommissionPercentageUpdatedEvent.OutputTuple,
      CommissionPercentageUpdatedEvent.OutputObject
    >;

    "DeedMinted(uint256,address,address)": TypedContractEvent<
      DeedMintedEvent.InputTuple,
      DeedMintedEvent.OutputTuple,
      DeedMintedEvent.OutputObject
    >;
    DeedMinted: TypedContractEvent<
      DeedMintedEvent.InputTuple,
      DeedMintedEvent.OutputTuple,
      DeedMintedEvent.OutputObject
    >;

    "DeedNFTUpdated(address)": TypedContractEvent<
      DeedNFTUpdatedEvent.InputTuple,
      DeedNFTUpdatedEvent.OutputTuple,
      DeedNFTUpdatedEvent.OutputObject
    >;
    DeedNFTUpdated: TypedContractEvent<
      DeedNFTUpdatedEvent.InputTuple,
      DeedNFTUpdatedEvent.OutputTuple,
      DeedNFTUpdatedEvent.OutputObject
    >;

    "FeeReceiverUpdated(address)": TypedContractEvent<
      FeeReceiverUpdatedEvent.InputTuple,
      FeeReceiverUpdatedEvent.OutputTuple,
      FeeReceiverUpdatedEvent.OutputObject
    >;
    FeeReceiverUpdated: TypedContractEvent<
      FeeReceiverUpdatedEvent.InputTuple,
      FeeReceiverUpdatedEvent.OutputTuple,
      FeeReceiverUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ServiceFeeCollected(address,address,uint256,uint256)": TypedContractEvent<
      ServiceFeeCollectedEvent.InputTuple,
      ServiceFeeCollectedEvent.OutputTuple,
      ServiceFeeCollectedEvent.OutputObject
    >;
    ServiceFeeCollected: TypedContractEvent<
      ServiceFeeCollectedEvent.InputTuple,
      ServiceFeeCollectedEvent.OutputTuple,
      ServiceFeeCollectedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "ValidatorFeesWithdrawn(address,address,uint256,address)": TypedContractEvent<
      ValidatorFeesWithdrawnEvent.InputTuple,
      ValidatorFeesWithdrawnEvent.OutputTuple,
      ValidatorFeesWithdrawnEvent.OutputObject
    >;
    ValidatorFeesWithdrawn: TypedContractEvent<
      ValidatorFeesWithdrawnEvent.InputTuple,
      ValidatorFeesWithdrawnEvent.OutputTuple,
      ValidatorFeesWithdrawnEvent.OutputObject
    >;

    "ValidatorRegistryUpdated(address)": TypedContractEvent<
      ValidatorRegistryUpdatedEvent.InputTuple,
      ValidatorRegistryUpdatedEvent.OutputTuple,
      ValidatorRegistryUpdatedEvent.OutputObject
    >;
    ValidatorRegistryUpdated: TypedContractEvent<
      ValidatorRegistryUpdatedEvent.InputTuple,
      ValidatorRegistryUpdatedEvent.OutputTuple,
      ValidatorRegistryUpdatedEvent.OutputObject
    >;
  };
}
