/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Fractionalize {
  export type BatchMintParamsStruct = {
    fractionId: BigNumberish;
    shareIds: BigNumberish[];
    recipients: AddressLike[];
  };

  export type BatchMintParamsStructOutput = [
    fractionId: bigint,
    shareIds: bigint[],
    recipients: string[]
  ] & { fractionId: bigint; shareIds: bigint[]; recipients: string[] };

  export type FractionCreationParamsStruct = {
    assetType: BigNumberish;
    originalTokenId: BigNumberish;
    name: string;
    description: string;
    symbol: string;
    collectionUri: string;
    totalShares: BigNumberish;
    burnable: boolean;
    approvalPercentage: BigNumberish;
  };

  export type FractionCreationParamsStructOutput = [
    assetType: bigint,
    originalTokenId: bigint,
    name: string,
    description: string,
    symbol: string,
    collectionUri: string,
    totalShares: bigint,
    burnable: boolean,
    approvalPercentage: bigint
  ] & {
    assetType: bigint;
    originalTokenId: bigint;
    name: string;
    description: string;
    symbol: string;
    collectionUri: string;
    totalShares: bigint;
    burnable: boolean;
    approvalPercentage: bigint;
  };

  export type FractionBasicInfoStruct = {
    name: string;
    symbol: string;
    totalShares: BigNumberish;
    activeShares: BigNumberish;
    maxSharesPerWallet: BigNumberish;
  };

  export type FractionBasicInfoStructOutput = [
    name: string,
    symbol: string,
    totalShares: bigint,
    activeShares: bigint,
    maxSharesPerWallet: bigint
  ] & {
    name: string;
    symbol: string;
    totalShares: bigint;
    activeShares: bigint;
    maxSharesPerWallet: bigint;
  };

  export type FractionExtendedInfoStruct = {
    description: string;
    collectionUri: string;
    requiredApprovalPercentage: BigNumberish;
    isActive: boolean;
    burnable: boolean;
  };

  export type FractionExtendedInfoStructOutput = [
    description: string,
    collectionUri: string,
    requiredApprovalPercentage: bigint,
    isActive: boolean,
    burnable: boolean
  ] & {
    description: string;
    collectionUri: string;
    requiredApprovalPercentage: bigint;
    isActive: boolean;
    burnable: boolean;
  };

  export type FractionOwnershipInfoStruct = {
    assetType: BigNumberish;
    originalTokenId: BigNumberish;
    collectionAdmin: AddressLike;
  };

  export type FractionOwnershipInfoStructOutput = [
    assetType: bigint,
    originalTokenId: bigint,
    collectionAdmin: string
  ] & { assetType: bigint; originalTokenId: bigint; collectionAdmin: string };

  export type UnlockParamsStruct = {
    fractionId: BigNumberish;
    to: AddressLike;
    checkApprovals: boolean;
  };

  export type UnlockParamsStructOutput = [
    fractionId: bigint,
    to: string,
    checkApprovals: boolean
  ] & { fractionId: bigint; to: string; checkApprovals: boolean };
}

export interface FractionalizeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "balanceOf"
      | "balanceOfBatch"
      | "batchMintShares"
      | "burnShare"
      | "canReceiveShares"
      | "createFraction"
      | "deedNFT"
      | "getApprovals"
      | "getFractionBasicInfo"
      | "getFractionExtendedInfo"
      | "getFractionOwnershipInfo"
      | "getRoleAdmin"
      | "getShareMetadata"
      | "getVotingPower"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "mintShare"
      | "nextFractionId"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "subdivideNFT"
      | "supportsInterface"
      | "unlockAsset"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminApprovalSet"
      | "AdminChanged"
      | "ApprovalForAll"
      | "AssetLocked"
      | "AssetUnlocked"
      | "BeaconUpgraded"
      | "FractionCreated"
      | "Initialized"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ShareBurned"
      | "ShareMinted"
      | "TransferApprovalSet"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMintShares",
    values: [Fractionalize.BatchMintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "burnShare",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceiveShares",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFraction",
    values: [Fractionalize.FractionCreationParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "deedNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApprovals",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionBasicInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionExtendedInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionOwnershipInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getShareMetadata",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShare",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextFractionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "subdivideNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockAsset",
    values: [Fractionalize.UnlockParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMintShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canReceiveShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionExtendedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionOwnershipInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShareMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextFractionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subdivideNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace AdminApprovalSetEvent {
  export type InputTuple = [
    fractionId: BigNumberish,
    approver: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    fractionId: bigint,
    approver: string,
    approved: boolean
  ];
  export interface OutputObject {
    fractionId: bigint;
    approver: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetLockedEvent {
  export type InputTuple = [
    fractionId: BigNumberish,
    originalTokenId: BigNumberish
  ];
  export type OutputTuple = [fractionId: bigint, originalTokenId: bigint];
  export interface OutputObject {
    fractionId: bigint;
    originalTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetUnlockedEvent {
  export type InputTuple = [
    fractionId: BigNumberish,
    originalTokenId: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    fractionId: bigint,
    originalTokenId: bigint,
    to: string
  ];
  export interface OutputObject {
    fractionId: bigint;
    originalTokenId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FractionCreatedEvent {
  export type InputTuple = [
    fractionId: BigNumberish,
    assetType: BigNumberish,
    originalTokenId: BigNumberish
  ];
  export type OutputTuple = [
    fractionId: bigint,
    assetType: bigint,
    originalTokenId: bigint
  ];
  export interface OutputObject {
    fractionId: bigint;
    assetType: bigint;
    originalTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShareBurnedEvent {
  export type InputTuple = [fractionId: BigNumberish, shareId: BigNumberish];
  export type OutputTuple = [fractionId: bigint, shareId: bigint];
  export interface OutputObject {
    fractionId: bigint;
    shareId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShareMintedEvent {
  export type InputTuple = [
    fractionId: BigNumberish,
    shareId: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [fractionId: bigint, shareId: bigint, to: string];
  export interface OutputObject {
    fractionId: bigint;
    shareId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferApprovalSetEvent {
  export type InputTuple = [
    fractionId: BigNumberish,
    approver: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    fractionId: bigint,
    approver: string,
    approved: boolean
  ];
  export interface OutputObject {
    fractionId: bigint;
    approver: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fractionalize extends BaseContract {
  connect(runner?: ContractRunner | null): Fractionalize;
  waitForDeployment(): Promise<this>;

  interface: FractionalizeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  batchMintShares: TypedContractMethod<
    [params: Fractionalize.BatchMintParamsStruct],
    [void],
    "nonpayable"
  >;

  burnShare: TypedContractMethod<
    [fractionId: BigNumberish, shareId: BigNumberish],
    [void],
    "nonpayable"
  >;

  canReceiveShares: TypedContractMethod<
    [fractionId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  createFraction: TypedContractMethod<
    [params: Fractionalize.FractionCreationParamsStruct],
    [void],
    "nonpayable"
  >;

  deedNFT: TypedContractMethod<[], [string], "view">;

  getApprovals: TypedContractMethod<
    [fractionId: BigNumberish, account: AddressLike],
    [
      [boolean, boolean] & { transferApproved: boolean; adminApproved: boolean }
    ],
    "view"
  >;

  getFractionBasicInfo: TypedContractMethod<
    [fractionId: BigNumberish],
    [Fractionalize.FractionBasicInfoStructOutput],
    "view"
  >;

  getFractionExtendedInfo: TypedContractMethod<
    [fractionId: BigNumberish],
    [Fractionalize.FractionExtendedInfoStructOutput],
    "view"
  >;

  getFractionOwnershipInfo: TypedContractMethod<
    [fractionId: BigNumberish],
    [Fractionalize.FractionOwnershipInfoStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getShareMetadata: TypedContractMethod<
    [fractionId: BigNumberish, shareId: BigNumberish],
    [string],
    "view"
  >;

  getVotingPower: TypedContractMethod<
    [fractionId: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_deedNFT: AddressLike, _subdivideNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintShare: TypedContractMethod<
    [fractionId: BigNumberish, shareId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  nextFractionId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  subdivideNFT: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unlockAsset: TypedContractMethod<
    [params: Fractionalize.UnlockParamsStruct],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchMintShares"
  ): TypedContractMethod<
    [params: Fractionalize.BatchMintParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnShare"
  ): TypedContractMethod<
    [fractionId: BigNumberish, shareId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canReceiveShares"
  ): TypedContractMethod<
    [fractionId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createFraction"
  ): TypedContractMethod<
    [params: Fractionalize.FractionCreationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deedNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApprovals"
  ): TypedContractMethod<
    [fractionId: BigNumberish, account: AddressLike],
    [
      [boolean, boolean] & { transferApproved: boolean; adminApproved: boolean }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFractionBasicInfo"
  ): TypedContractMethod<
    [fractionId: BigNumberish],
    [Fractionalize.FractionBasicInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFractionExtendedInfo"
  ): TypedContractMethod<
    [fractionId: BigNumberish],
    [Fractionalize.FractionExtendedInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFractionOwnershipInfo"
  ): TypedContractMethod<
    [fractionId: BigNumberish],
    [Fractionalize.FractionOwnershipInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getShareMetadata"
  ): TypedContractMethod<
    [fractionId: BigNumberish, shareId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingPower"
  ): TypedContractMethod<
    [fractionId: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_deedNFT: AddressLike, _subdivideNFT: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintShare"
  ): TypedContractMethod<
    [fractionId: BigNumberish, shareId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextFractionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subdivideNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unlockAsset"
  ): TypedContractMethod<
    [params: Fractionalize.UnlockParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "AdminApprovalSet"
  ): TypedContractEvent<
    AdminApprovalSetEvent.InputTuple,
    AdminApprovalSetEvent.OutputTuple,
    AdminApprovalSetEvent.OutputObject
  >;
  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "AssetLocked"
  ): TypedContractEvent<
    AssetLockedEvent.InputTuple,
    AssetLockedEvent.OutputTuple,
    AssetLockedEvent.OutputObject
  >;
  getEvent(
    key: "AssetUnlocked"
  ): TypedContractEvent<
    AssetUnlockedEvent.InputTuple,
    AssetUnlockedEvent.OutputTuple,
    AssetUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "FractionCreated"
  ): TypedContractEvent<
    FractionCreatedEvent.InputTuple,
    FractionCreatedEvent.OutputTuple,
    FractionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ShareBurned"
  ): TypedContractEvent<
    ShareBurnedEvent.InputTuple,
    ShareBurnedEvent.OutputTuple,
    ShareBurnedEvent.OutputObject
  >;
  getEvent(
    key: "ShareMinted"
  ): TypedContractEvent<
    ShareMintedEvent.InputTuple,
    ShareMintedEvent.OutputTuple,
    ShareMintedEvent.OutputObject
  >;
  getEvent(
    key: "TransferApprovalSet"
  ): TypedContractEvent<
    TransferApprovalSetEvent.InputTuple,
    TransferApprovalSetEvent.OutputTuple,
    TransferApprovalSetEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminApprovalSet(uint256,address,bool)": TypedContractEvent<
      AdminApprovalSetEvent.InputTuple,
      AdminApprovalSetEvent.OutputTuple,
      AdminApprovalSetEvent.OutputObject
    >;
    AdminApprovalSet: TypedContractEvent<
      AdminApprovalSetEvent.InputTuple,
      AdminApprovalSetEvent.OutputTuple,
      AdminApprovalSetEvent.OutputObject
    >;

    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "AssetLocked(uint256,uint256)": TypedContractEvent<
      AssetLockedEvent.InputTuple,
      AssetLockedEvent.OutputTuple,
      AssetLockedEvent.OutputObject
    >;
    AssetLocked: TypedContractEvent<
      AssetLockedEvent.InputTuple,
      AssetLockedEvent.OutputTuple,
      AssetLockedEvent.OutputObject
    >;

    "AssetUnlocked(uint256,uint256,address)": TypedContractEvent<
      AssetUnlockedEvent.InputTuple,
      AssetUnlockedEvent.OutputTuple,
      AssetUnlockedEvent.OutputObject
    >;
    AssetUnlocked: TypedContractEvent<
      AssetUnlockedEvent.InputTuple,
      AssetUnlockedEvent.OutputTuple,
      AssetUnlockedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "FractionCreated(uint256,uint8,uint256)": TypedContractEvent<
      FractionCreatedEvent.InputTuple,
      FractionCreatedEvent.OutputTuple,
      FractionCreatedEvent.OutputObject
    >;
    FractionCreated: TypedContractEvent<
      FractionCreatedEvent.InputTuple,
      FractionCreatedEvent.OutputTuple,
      FractionCreatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ShareBurned(uint256,uint256)": TypedContractEvent<
      ShareBurnedEvent.InputTuple,
      ShareBurnedEvent.OutputTuple,
      ShareBurnedEvent.OutputObject
    >;
    ShareBurned: TypedContractEvent<
      ShareBurnedEvent.InputTuple,
      ShareBurnedEvent.OutputTuple,
      ShareBurnedEvent.OutputObject
    >;

    "ShareMinted(uint256,uint256,address)": TypedContractEvent<
      ShareMintedEvent.InputTuple,
      ShareMintedEvent.OutputTuple,
      ShareMintedEvent.OutputObject
    >;
    ShareMinted: TypedContractEvent<
      ShareMintedEvent.InputTuple,
      ShareMintedEvent.OutputTuple,
      ShareMintedEvent.OutputObject
    >;

    "TransferApprovalSet(uint256,address,bool)": TypedContractEvent<
      TransferApprovalSetEvent.InputTuple,
      TransferApprovalSetEvent.OutputTuple,
      TransferApprovalSetEvent.OutputObject
    >;
    TransferApprovalSet: TypedContractEvent<
      TransferApprovalSetEvent.InputTuple,
      TransferApprovalSetEvent.OutputTuple,
      TransferApprovalSetEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
