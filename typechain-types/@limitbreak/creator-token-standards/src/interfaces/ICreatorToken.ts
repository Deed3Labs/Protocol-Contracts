/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ICreatorTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTransferValidationFunction"
      | "getTransferValidator"
      | "setTransferValidator"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TransferValidatorUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getTransferValidationFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferValidator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransferValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferValidator",
    data: BytesLike
  ): Result;
}

export namespace TransferValidatorUpdatedEvent {
  export type InputTuple = [
    oldValidator: AddressLike,
    newValidator: AddressLike
  ];
  export type OutputTuple = [oldValidator: string, newValidator: string];
  export interface OutputObject {
    oldValidator: string;
    newValidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICreatorToken extends BaseContract {
  connect(runner?: ContractRunner | null): ICreatorToken;
  waitForDeployment(): Promise<this>;

  interface: ICreatorTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTransferValidationFunction: TypedContractMethod<
    [],
    [
      [string, boolean] & { functionSignature: string; isViewFunction: boolean }
    ],
    "view"
  >;

  getTransferValidator: TypedContractMethod<[], [string], "view">;

  setTransferValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTransferValidationFunction"
  ): TypedContractMethod<
    [],
    [
      [string, boolean] & { functionSignature: string; isViewFunction: boolean }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferValidator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setTransferValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "TransferValidatorUpdated"
  ): TypedContractEvent<
    TransferValidatorUpdatedEvent.InputTuple,
    TransferValidatorUpdatedEvent.OutputTuple,
    TransferValidatorUpdatedEvent.OutputObject
  >;

  filters: {
    "TransferValidatorUpdated(address,address)": TypedContractEvent<
      TransferValidatorUpdatedEvent.InputTuple,
      TransferValidatorUpdatedEvent.OutputTuple,
      TransferValidatorUpdatedEvent.OutputObject
    >;
    TransferValidatorUpdated: TypedContractEvent<
      TransferValidatorUpdatedEvent.InputTuple,
      TransferValidatorUpdatedEvent.OutputTuple,
      TransferValidatorUpdatedEvent.OutputObject
    >;
  };
}
