/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ITransferValidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterAuthorizedTransfer(address)"
      | "afterAuthorizedTransfer(address,uint256)"
      | "afterAuthorizedTransferWithAmount"
      | "applyCollectionTransferPolicy"
      | "beforeAuthorizedTransfer(address,uint256)"
      | "beforeAuthorizedTransfer(address,address)"
      | "beforeAuthorizedTransfer(address,address,uint256)"
      | "beforeAuthorizedTransferWithAmount"
      | "validateTransfer(address,address,address,uint256,uint256)"
      | "validateTransfer(address,address,address)"
      | "validateTransfer(address,address,address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterAuthorizedTransfer(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAuthorizedTransfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAuthorizedTransferWithAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyCollectionTransferPolicy",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAuthorizedTransfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAuthorizedTransfer(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAuthorizedTransfer(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAuthorizedTransferWithAmount",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,address,uint256,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,address)",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterAuthorizedTransfer(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAuthorizedTransfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAuthorizedTransferWithAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyCollectionTransferPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAuthorizedTransfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAuthorizedTransfer(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAuthorizedTransfer(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAuthorizedTransferWithAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,address,uint256)",
    data: BytesLike
  ): Result;
}

export interface ITransferValidator extends BaseContract {
  connect(runner?: ContractRunner | null): ITransferValidator;
  waitForDeployment(): Promise<this>;

  interface: ITransferValidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "afterAuthorizedTransfer(address)": TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  "afterAuthorizedTransfer(address,uint256)": TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  afterAuthorizedTransferWithAmount: TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  applyCollectionTransferPolicy: TypedContractMethod<
    [caller: AddressLike, from: AddressLike, to: AddressLike],
    [void],
    "view"
  >;

  "beforeAuthorizedTransfer(address,uint256)": TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "beforeAuthorizedTransfer(address,address)": TypedContractMethod<
    [operator: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  "beforeAuthorizedTransfer(address,address,uint256)": TypedContractMethod<
    [operator: AddressLike, token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  beforeAuthorizedTransferWithAmount: TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "validateTransfer(address,address,address,uint256,uint256)": TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "validateTransfer(address,address,address)": TypedContractMethod<
    [caller: AddressLike, from: AddressLike, to: AddressLike],
    [void],
    "view"
  >;

  "validateTransfer(address,address,address,uint256)": TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterAuthorizedTransfer(address)"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "afterAuthorizedTransfer(address,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterAuthorizedTransferWithAmount"
  ): TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyCollectionTransferPolicy"
  ): TypedContractMethod<
    [caller: AddressLike, from: AddressLike, to: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "beforeAuthorizedTransfer(address,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAuthorizedTransfer(address,address)"
  ): TypedContractMethod<
    [operator: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAuthorizedTransfer(address,address,uint256)"
  ): TypedContractMethod<
    [operator: AddressLike, token: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAuthorizedTransferWithAmount"
  ): TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,address)"
  ): TypedContractMethod<
    [caller: AddressLike, from: AddressLike, to: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "view"
  >;

  filters: {};
}
